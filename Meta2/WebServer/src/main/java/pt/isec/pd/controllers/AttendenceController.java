package pt.isec.pd.controllers;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.*;
import pt.isec.pd.models.Event;
import pt.isec.pd.models.database.DatabaseManager;

import java.util.List;

@RestController
@RequestMapping("code")
public class AttendenceController {

    // POST: localhost:8080/code/send/your_code

    @PostMapping("/send/{code}")
    public ResponseEntity sendCode(Authentication authentication,
                                   @PathVariable("code") int code) {

        Jwt acc_details = (Jwt) authentication.getPrincipal();

        if(acc_details.getClaim("scope").toString().equals("ADMIN"))
            return ResponseEntity.ok("You must be a Normal User to call this action!");

        String auth_username = acc_details.getSubject().toString();

        System.out.println("[*] Code received (code) by " + auth_username);

        Event evt = new Event(Event.type_event.CODE_EVENT, code);
        evt.setUser_email(auth_username);

        if (DatabaseManager.getInstance().verifyCode(evt)) {
            return ResponseEntity.ok("Attendence registration made by a code ("+code+")");
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed (code not found or expired!)");
        }
    }

    // POST: localhost:8080/code/generate/name=eventName/time=time

    @PostMapping("/generate/name={name}/time={time}")
    public ResponseEntity generateCode(Authentication authentication,
                                   @PathVariable("name") String name, @PathVariable("time") String time) {

        Jwt acc_details = (Jwt) authentication.getPrincipal();

        if(!acc_details.getClaim("scope").toString().equals("ADMIN"))
            return ResponseEntity.ok("You must be a Admin User to call this action!");

        String auth_username = acc_details.getSubject().toString();

        Event evt = new Event(Event.type_event.CODE_EVENT, 0);
        evt.setEvent_name(name);
        evt.setEvent_end_time(time);

        if (DatabaseManager.getInstance().generateCode(evt)) {
            System.out.println("[*] Code generated by " + auth_username);
            return ResponseEntity.ok("Code ("+evt.getAttend_code()+")generated to "+name+" event");
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed generating code!");
        }
    }

    // Get: localhost:8080/search/?

    @GetMapping("/search")
    public ResponseEntity search(Authentication authentication,
                                 @RequestParam(value="name", required=false) String name,
                                 @RequestParam(value="start", required=false) String start_time,
                                 @RequestParam(value="end", required=false) String end_time,
                                 @RequestParam(value="date", required=false) String date) {

        Jwt acc_details = (Jwt) authentication.getPrincipal();

        if(acc_details.getClaim("scope").toString().equals("ADMIN"))
            return ResponseEntity.ok("You must be a Normal User to call this action!");

        Event evt = new Event(Event.type_event.CODE_EVENT, 0);

        if(date != null)
            evt.setEvent_date(date);
        if(name != null)
            evt.setEvent_name(name);

        if(start_time != null)
            if(end_time != null){
                evt.setEvent_start_time(start_time);
                evt.setEvent_end_time(end_time);
            }else{
                return  ResponseEntity.badRequest().body("You must enter end_time too!");
            }
        if(end_time != null)
            if(start_time != null){
                evt.setEvent_start_time(start_time);
                evt.setEvent_end_time(end_time);
            }else{
                return  ResponseEntity.badRequest().body("You must enter start_time too!");
            }

        List<String> db_result = DatabaseManager.getInstance().getAttendance(evt);

        if(name == null)
            db_result = DatabaseManager.getInstance().getAllAttendances();

        if((long) db_result.size() < 1){
            return  ResponseEntity.badRequest().body("Any attendance to list!");
        }else{
            return  ResponseEntity.ok(db_result);
        }
    }

    // GET : localhost:8080:list/event_name_to_list_attendances

    @GetMapping("/list/{name}")
    public ResponseEntity list(Authentication authentication,
                                 @PathVariable("name") String name
                                ) {

        Jwt acc_details = (Jwt) authentication.getPrincipal();

        if(!acc_details.getClaim("scope").toString().equals("ADMIN"))
            return ResponseEntity.ok("You must be a Admin User to call this action!");

        Event evt = new Event(Event.type_event.CODE_EVENT, 0);

        if(name == null)
            return  ResponseEntity.badRequest().body("Any name entered into endpoint");

        evt.setEvent_name(name);
        List<String> db_result = DatabaseManager.getInstance().getAttendance(evt);

        if((long) db_result.size() < 1){
            return  ResponseEntity.badRequest().body("Any attendance to list!");
        }else{
            return  ResponseEntity.ok(db_result);
        }
    }

}
