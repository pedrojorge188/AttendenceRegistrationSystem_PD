package pt.isec.pd.controllers;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import pt.isec.pd.models.Event;
import pt.isec.pd.models.database.DatabaseManager;

@RestController
@RequestMapping("code")
public class AttendenceController {

    // POST: localhost:8080/code/send/your_code

    @PostMapping("/send/{code}")
    public ResponseEntity sendCode(Authentication authentication,
                                   @PathVariable("code") int code) {

        Jwt acc_details = (Jwt) authentication.getPrincipal();

        if(acc_details.getClaim("scope").toString().equals("ADMIN"))
            return ResponseEntity.ok("You must be a Normal User to call this action!");

        String auth_username = acc_details.getSubject().toString();

        System.out.println("[*] Code received (code) by " + auth_username);

        Event evt = new Event(Event.type_event.CODE_EVENT, code);
        evt.setUser_email(auth_username);

        if (DatabaseManager.getInstance().verifyCode(evt)) {
            return ResponseEntity.ok("Attendence registration made by a code ("+code+")");
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed (code not found or expired!)");
        }
    }

    // POST: localhost:8080/code/generate/name=eventName/time=time

    @PostMapping("/generate/name={name}/time={time}")
    public ResponseEntity generateCode(Authentication authentication,
                                   @PathVariable("name") String name, @PathVariable("time") String time) {

        Jwt acc_details = (Jwt) authentication.getPrincipal();

        if(!acc_details.getClaim("scope").toString().equals("ADMIN"))
            return ResponseEntity.ok("You must be a Admin User to call this action!");

        String auth_username = acc_details.getSubject().toString();

        Event evt = new Event(Event.type_event.CODE_EVENT, 0);
        evt.setEvent_name(name);
        evt.setEvent_end_time(time);

        if (DatabaseManager.getInstance().generateCode(evt)) {
            System.out.println("[*] Code generated by " + auth_username);
            return ResponseEntity.ok("Code ("+evt.getAttend_code()+")generated to "+name+" event");
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed generating code!");
        }
    }

}
